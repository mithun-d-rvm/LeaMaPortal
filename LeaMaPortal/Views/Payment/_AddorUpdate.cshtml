@model LeaMaPortal.Models.PaymentViewModel
@{
    Layout = null;
}
<div class="inner-block">
    <div class="blank">
        <div class="row">
            <div class="col-md-6">
                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.PaymentNo, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-8">

                        @Html.EditorFor(model => model.PaymentNo, new { htmlAttributes = new { @class = "master-form-input" } })
                    </div>
                </div>
                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.PaymentDate, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.PaymentDate, new { htmlAttributes = new { @class = "master-form-input" } })
                    </div>
                </div>
                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.PaymentType, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.PaymentType, new SelectList(ViewBag.PaymentType, "Value", "Text"), htmlAttributes: new { @class = "master-form-input" })
                    </div>
                </div>
                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.PaymentMode, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.PaymentMode, new SelectList(ViewBag.PaymentMode, "Value", "Text"), htmlAttributes: new { @class = "master-form-input" })
                    </div>
                </div>
                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.Supplier_id, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.Supplier_id, new SelectList(ViewBag.Supplier_id, "Value", "Text"), htmlAttributes: new { @class = "master-form-input" })
                    </div>
                </div>

                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.agreement_no, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-8">
                        @Html.DropDownList("agreement_no", null, htmlAttributes: new { @class = "master-form-input", @id = "agreement_number" })                        
                    </div>
                </div>



                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.Property_id, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-8">
                        @*@Html.EditorFor(model => model.Property_ID, new { htmlAttributes = new { @class = "master-form-input" } })*@
                        @Html.DropDownList("Property_id", null, htmlAttributes: new { @class = "master-form-input", @id = "property_id" })                        
                    </div>
                </div>
                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.Property_Name, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-8">
                        @*@Html.EditorFor(model => model.Property_Name, new { htmlAttributes = new { @class = "master-form-input" } })*@
                        @Html.DropDownList("Property_Name", null, htmlAttributes: new { @class = "master-form-input",@id = "property_name" })                        
                    </div>
                </div>
                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.Unit_ID, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-8">
                        @*@Html.EditorFor(model => model.Unit_ID, new { htmlAttributes = new { @class = "master-form-input" } })*@
                        @Html.DropDownList("Unit_ID", null, htmlAttributes: new { @class = "master-form-input", @id = "unit_id" })                        
                    </div>
                </div>
                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.unit_Name, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-8">
                        @*@Html.EditorFor(model => model.unit_Name, new { htmlAttributes = new { @class = "master-form-input" } })*@
                        @Html.DropDownList("unit_Name", null, htmlAttributes: new { @class = "master-form-input", @id = "unit_name" })                        
                    </div>
                </div>



                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.TotalAmount, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.TotalAmount, new { htmlAttributes = new { @class = "master-form-input" } })
                    </div>
                </div>


            </div>
            <div class="col-md-6">


                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.AmtInWords, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.AmtInWords, new { htmlAttributes = new { @class = "master-form-input" } })
                    </div>
                </div>
                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.AdvAcCode, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-8">
                        <select class="col-md-12 leama-field">
                            <option value="unit_Name">AdvacedAccno</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.PDCstatus, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.PDCstatus, new SelectList(ViewBag.PDCStatus, "Value", "Text"), htmlAttributes: new { @class = "master-form-input" })
                    </div>
                </div>
                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.DDChequeNo, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.DDChequeNo, new { htmlAttributes = new { @class = "master-form-input" } })
                    </div>
                </div>
                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.DDChequeDate, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.DDChequeDate, new { htmlAttributes = new { @class = "master-form-input" } })
                    </div>
                </div>
                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.BankAcCode, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-8">
                        @*@Html.EditorFor(model => model.BankAcCode, new { htmlAttributes = new { @class = "master-form-input" } })*@
                        <select class="col-md-12 leama-field">
                            <option value="BankAcCode">Bank Account Code</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.BankAcName, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-8">
                        @*@Html.EditorFor(model => model.BankAcName, new { htmlAttributes = new { @class = "master-form-input" } })*@
                        <select class="col-md-12 leama-field">
                            <option value="Bank Account Name">Bank Account Name</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.Narration, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Narration, new { htmlAttributes = new { @class = "master-form-input" } })
                    </div>
                </div>
                <div class="col-md-12 form-input-padding">
                    <div class="col-md-4">
                        &nbsp;
                    </div>
                    <div class="col-md-4">
                        <button class="btn master-form-btn">Submit</button>
                    </div>
                </div>
            </div>

        </div>

        @*<div class="row">
            <div class="col-md-12 document-row">
                <div class="col-md-1">
                    ID
                </div>
                <div class="col-md-2">
                    Invoice Type
                </div>
                <div class="col-md-2">
                    Invoice Number
                </div>
                <div class="col-md-2">
                    Invoice Date
                </div>
                <div class="col-md-2">
                    Invoice Description
                </div>
            </div>
        </div>
        <div class="row ht-5">
            &nbsp;
        </div>*@

        <!-- Begin Dynamic row -->
        @*@Html.Partial("_PaymentDetails")*@
        <!-- End Dynamic row -->



    </div>
</div>
<script>
    function getUnitId() {
    var PropertyId = $("#property_id").val();
    var PropertyName = $("#property_name").val();
        $.ajax(
                {
                    url: "../Payment/GetUnitId",
                    method: "POST",
                    async: false,
                    data: { PropertyId: PropertyId, PropertyName : PropertyName },
                    success: function (response) {
                        $("#unit_id").empty();
                        $("#unit_name").empty();
                        $("#agreement_no").empty();
                        var unit_id_options = '';
                        var unit_name_options = '';
                        var agreement_options = '';
                        $.each(response.UnitId, function (index, data) {
                            unit_id_options += '<option value="' + data.Value + '">' + data.Value + '</option>';                            
                        });
                        $.each(response.UnitName, function (index, data) {
                            unit_name_options += '<option value="' + data.Value + '">' + data.Value + '</option>';
                        });
                        $.each(response.AgreementNo, function (index, data) {
                            agreement_options += '<option value="' + data.Value + '">' + data.Value + '</option>';
                        });
                        
                        $('#unit_id').append(unit_id_options);
                        $('#unit_name').append(unit_name_options);
                        $('#agreement_number').append(agreement_options);
                        $("#property_id").val(response.PropertyId);
                        $("#property_name").val(response.PropertyName);
                    },
                    error: function (jqXhr, textStatus, errorThrown) {
                        alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                    },
                    complete: function () {
                    }
                });
    }
$("#property_id").change(function () { getUnitId() });
$("#property_name").change(function () { getUnitId() });
getUnitId();
function getProperty() {
    var UnitId = $("#unit_id").val();
    var UnitName = $("#unit_name").val();
    $.ajax(
            {
                url: "../Payment/GetProperty",
                method: "POST",
                async: false,
                data: { UnitId: UnitId, UnitName: UnitName },
                success: function (response) {
                    $("#property_id").empty();
                    $("#property_name").empty();
                    $("#agreement_no").empty();                    
                    $('#property_id').append('<option value="' + response.PropertyId + '">' + response.PropertyId + '</option>');
                    $('#property_name').append('<option value="' + response.PropertyName + '">' + response.PropertyName + '</option>');
                    $('#agreement_number').append('<option value="' + response.AgreementNo + '">' + response.AgreementNo + '</option>');
                },
                error: function (jqXhr, textStatus, errorThrown) {
                    alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                },
                complete: function () {
                }
            });
}
$("#unit_id").change(function () { getProperty() });
$("#unit_name").change(function () { getProperty() });
function getAgreementDetails() {
    var AgreementNo = $("#agreement_number").val();
    $.ajax(
            {
                url: "../Payment/GetAgreementDetails",
                method: "POST",
                async: false,
                data: { AgreementNo: AgreementNo },
                success: function (response) {
                    $("#property_id").empty();
                    $("#property_name").empty();
                    $("#unit_id").empty();
                    $("#unit_name").empty();
                    var unit_id_options = '';
                    var unit_name_options = '';
                    var property_id_options = '';
                    var property_name_options = '';
                    $.each(response.UnitId, function (index, data) {
                        unit_id_options += '<option value="' + data.Value + '">' + data.Value + '</option>';
                    });
                    $.each(response.UnitName, function (index, data) {
                        unit_name_options += '<option value="' + data.Value + '">' + data.Value + '</option>';
                    });
                    $.each(response.PropertyId, function (index, data) {
                        property_id_options += '<option value="' + data.Value + '">' + data.Value + '</option>';
                    });
                    $.each(response.PropertyName, function (index, data) {
                        property_name_options += '<option value="' + data.Value + '">' + data.Value + '</option>';
                    });
                    $('#unit_id').append(unit_id_options);
                    $('#unit_name').append(unit_name_options);
                    $('#property_id').append(property_id_options);
                    $('#property_name').append(property_name_options);
                },
                error: function (jqXhr, textStatus, errorThrown) {
                    alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                },
                complete: function () {
                }
            });
}
$("#agreement_number").change(function () { getAgreementDetails() });

</script>