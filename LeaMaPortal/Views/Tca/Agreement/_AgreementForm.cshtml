<!--
  File Name      : _AgreementForm.cshtml
  Description    : Agreement Details partial view
  Created Date   : 25-Mar-2017
  Notes          : <Notes>
-->

@model LeaMaPortal.Models.AgreementFormViewModel
@*@using (Html.BeginForm("AddOrUpdate", "Tca", FormMethod.Post, new { @id = "Tca", @enctype = "multipart/form-data" }))*@
@{
    @Html.HiddenFor(x=>x.Ag_Tenant_id)
    @Html.HiddenFor(x => x.Ag_Tenant_Name)
    @*@Html.HiddenFor(x=>x.property_id)*@
    @Html.HiddenFor(x=>x.Property_ID_Tawtheeq)
    @Html.HiddenFor(x => x.Properties_Name)
    @Html.HiddenFor(x=>x.Unit_ID_Tawtheeq)
    @Html.HiddenFor(x=>x.Unit_Property_Name)
    @*@Html.HiddenFor(x=>x.Caretaker_id)
    @Html.HiddenFor(x=>x.Caretaker_Name)*@
    <div class="font-smaller">
        @Html.HiddenFor(m => m.New_Renewal_flag)
        <div class="text-uppercase">
            <span class="font-x-large"> <strong> Agreement </strong> </span>
            @*<div class="pull-right m-t-15">
                <span class="document-btn print-btn" data-toggle="modal" data-target="#contractModal"> Print Contract </span>
            </div>*@
        </div>
        <div class="p-b-25"> &nbsp; </div>
        <div class="row">
            <div class="col-md-6 ht-50">
                <div class="col-md-12 p-b-7">
                    <div class="col-md-3 m-t-3">
                        <span> Single Unit </span>
                    </div>
                    <div class="col-md-1">
                        @Html.RadioButtonFor(model => model.Single_Multiple_Flag, "Single", new {@class = "input-checkbox",@required= "required",@id="single" })
                    </div>
                    <div class="col-md-4 m-t-3">
                        <span> Multiple Unit </span>
                    </div>
                    <div class="col-md-1 m-l-m-40">
                        @Html.RadioButtonFor(model => model.Single_Multiple_Flag, "Multiple", new {@class = "input-checkbox", @required = "required", @id = "multiple" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                @*<div class="col-md-12 p-b-7">
                        <div class="col-md-6">
                            Existing Contract Agreement:
                        </div>
                        <div class="col-md-6">
                            <select class="master-form-input form-control">
                                <option> Agreement 1 </option>
                                <option> Agreement 2 </option>
                                <option> Agreement 3 </option>
                            </select>
                        </div>
                    </div>*@
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Agreement_No, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.HiddenFor(model => model.Agreement_No)
                        <input type="text" value="@ViewBag.Agreement_No" disabled class="master-form-input form-control" />
                        @*@Html.EditorFor(model => model.Agreement_No, new { htmlAttributes = new { @class = "master-form-input" } })*@
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Agreement_Date, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*@Html.EditorFor(model => model.Agreement_Date, new { htmlAttributes = new { @class = "master-form-input" } })*@
                        @Html.EditorFor(model => model.Agreement_Date, new { htmlAttributes = new { @class = "master-form-input form-control" } })
                        @Html.ValidationMessageFor(model => model.Agreement_Date, "", new { @class = "text-danger", @required = "required" })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Tenant_Type, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.DropDownList("Tenant_Type", null, "-- Select --", new { @class = "master-form-input form-control", @required = "required" })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Ag_Tenant_id, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<input type="text" class="master-form-input form-control" />*@
                        @Html.DropDownList("Ag_Tenantid", null, "-- Select --", new { @class = "master-form-input form-control", @Name = "Ag_Tenant_id", @required = "required" })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Ag_Tenant_Name, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<input type="text" class="master-form-input form-control" />*@
                        @Html.DropDownList("Ag_TenantName", null, "-- Select --", new { @class = "master-form-input form-control", @Name = "Ag_Tenant_Name", @required = "required" })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Caretaker_id, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<input type="text" class="master-form-input form-control" />*@
                        @Html.EditorFor(m => m.Caretaker_id, new { htmlAttributes = new { @class = "master-form-input form-control", @readonly = "readonly", @required = "required" } })
                        @*@Html.DropDownList("Caretakerid", null, "-- Select --", new { @class = "master-form-input form-control", @required = "required" })*@
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Caretaker_Name, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<input type="text" class="master-form-input form-control" />*@
                        @Html.EditorFor(m => m.Caretaker_Name, new { htmlAttributes = new { @class = "master-form-input form-control",@readonly = "readonly", @required = "required" } })
                        @*@Html.DropDownList("CaretakerName", null, "-- Select --", new { @class = "master-form-input form-control", @required = "required" })*@
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.property_id, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<input type="text" class="master-form-input form-control" />*@
                        @Html.EditorFor(model=>model.property_id, new { htmlAttributes = new { @class = "master-form-input form-control", @readonly="readonly", @required = "required" } })
                        @*@Html.DropDownList("TcaPropertyId", null, "-- Select --", new { @class = "master-form-input" })*@
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Property_ID_Tawtheeq, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<input type="text" class="master-form-input form-control" />*@
                        @Html.DropDownList("TcaPropertyIDTawtheeq", null, "-- Select --", new { @class = "master-form-input form-control" })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Properties_Name, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<input type="text" class="master-form-input form-control" />*@
                        @Html.DropDownList("TcaPropertyName", null, "-- Select --", new { @class = "master-form-input form-control" })
                    </div>
                </div>
                <div class="col-md-12 p-b-7" id="UnitPropertyId">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Unit_ID_Tawtheeq, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<input type="text" class="master-form-input form-control" />*@
                        @Html.DropDownList("UnitIDTawtheeq", null, "-- Select --", new { @class = "master-form-input form-control"})
                    </div>
                </div>
                <div class="col-md-12 p-b-7" id="Unitpropertyname">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Unit_Property_Name, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<input type="text" class="master-form-input form-control" />*@
                        @Html.DropDownList("UnitPropertyName", null, "-- Select --", new { @class = "master-form-input form-control" })
                    </div>
                </div>
            </div>



            <div class="col-md-6">
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Vacantstartdate, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Vacantstartdate, new { htmlAttributes = new { @class = "master-form-input form-control",@readonly= "readonly" } })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Agreement_Start_Date, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Agreement_Start_Date, new { htmlAttributes = new { @class = "master-form-input form-control", @required = "required", @onblur = "setMinForAgreementDate()" } })
                    </div>
                </div>
                <div class="col-md-12 p-b-7"> 
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Agreement_End_Date, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Agreement_End_Date, new { htmlAttributes = new { @class = "master-form-input form-control", @required = "required" } })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Total_Rental_amount, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Total_Rental_amount, new { htmlAttributes = new { @class = "master-form-input form-control", @onkeypress = "allow_only_Float(event,'Total_Rental_amount');", @required = "required" } })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Perday_Rental, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Perday_Rental, new { htmlAttributes = new { @class = "master-form-input form-control", @onkeypress = "allow_only_Float(event,'Perday_Rental');", @required = "required",@readonly= "readonly" } })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.nofopayments, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.nofopayments, new { htmlAttributes = new { @class = "master-form-input form-control", @onkeypress = "allow_only_numbers(event);", @required = "required",@min="0" } })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Advance_Security_Amount, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Advance_Security_Amount, new { htmlAttributes = new { @class = "master-form-input form-control",@onkeypress = "allow_only_Float(event,'Advance_Security_Amount');",@required= "required"} })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Security_Flag, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<select class="master-form-input form-control">
                                <option> Payment 1 </option>
                                <option> Payment 2 </option>
                                <option> Payment 3 </option>
                            </select>*@
                        @Html.DropDownList("SecurityFlag", null, new { @class = "master-form-input form-control", @required = "required" })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Security_chequeno, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Security_chequeno, new { htmlAttributes = new { @class = "master-form-input form-control", @Name = "SecurityChequeno", disabled = "disabled" } })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Security_chequedate, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Security_chequedate, new { htmlAttributes = new { @class = "master-form-input form-control", @Name = "SecurityChequedate", disabled = "disabled" } })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Notice_Period, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Notice_Period, new { htmlAttributes = new { @class = "master-form-input form-control", @onkeypress = "allow_only_numbers(event);", @min = "0" } })  
                    </div>
                </div>

            </div>
        </div>
        <div class="p-t-5-p">
            &nbsp;
        </div>
        
     
    </div>
}
<script>
    function setMinForAgreementDate() {

        var to = $("#Agreement_Start_Date").val();
        if (to != "") {
            $("#Agreement_End_Date").prop('min', to);
        }
    }
    singleOrMultiple();
    function singleOrMultiple()
    {
        var value = $('input[type=radio][name=Single_Multiple_Flag]').val();
        if (value == 'Multiple') {
            //$('#UnitIDTawtheeq').attr('disabled', true);
            //$('#UnitPropertyName').attr('disabled', true);
            $("#UnitPropertyId").hide();
            $("#Unitpropertyname").hide();
            $("#AgreementUnit").show();
        }
        else {
            //$('#UnitIDTawtheeq').removeAttr('disabled');
            //$('#UnitPropertyName').removeAttr('disabled');
            $("#UnitPropertyId").show();
            $("#Unitpropertyname").show();
            $("#AgreementUnit").hide();
        }
    }
    $('input[type=radio][name=Single_Multiple_Flag]').change(function () {
        singleOrMultiple();
        if (this.value == 'Multiple') {
            //$('#UnitIDTawtheeq').attr('disabled', true);
            //$('#UnitPropertyName').attr('disabled', true);
            $("#UnitPropertyId").hide();
            $("#Unitpropertyname").hide();
            $("#AgreementUnit").show();
        }
        else {
            //$('#UnitIDTawtheeq').removeAttr('disabled');
            //$('#UnitPropertyName').removeAttr('disabled');
            $("#UnitPropertyId").show();
            $("#Unitpropertyname").show();
            $("#AgreementUnit").hide();
        }
        $("#property_id").val(null);
        $.ajax(
               {
                   url: "../Tca/GetPropertiesDetails",
                   // dataType: "jsonp",
                   method: "GET",
                   data: { Type: this.value }, //FormData(form.get(0)),
                   contentType: "application/json",

                   success: function (response) {
                        
                       //var propertyidOptions = '<option value="" selected>--Select--</option>';
                       //$("#TcaPropertyId").empty();

                       var propertyidTawtheeqOptions = '<option value="" selected>--Select--</option>';
                       $("#TcaPropertyIDTawtheeq").empty();

                       var propertyNameOptions = '<option value="" selected>--Select--</option>';
                       $("#TcaPropertyName").empty();

                       var unitidOptions = '<option value="" selected>--Select--</option>';
                       $("#UnitIDTawtheeq").empty();

                       var unitnameOptions = '<option value="" selected>--Select--</option>';
                       $("#UnitPropertyName").empty();

                       $.each(response, function (index, data) {
                           //propertyidOptions += '<option value="' + data.property_id + '">' + data.property_id + '</option>';
                           propertyidTawtheeqOptions += '<option value="' + data.property_id + '">' + data.Property_ID_Tawtheeq + '</option>';
                           propertyNameOptions += '<option value="' + data.property_id + '">' + data.Property_Name + '</option>';
                           if (this.value != 'Multiple') {
                               unitidOptions += '<option value="' + data.property_id + '">' + data.Unit_ID_Tawtheeq + '</option>';
                               unitnameOptions += '<option value="' + data.property_id + '">' + data.Unit_Property_Name + '</option>';
                           }
                       });
                       $('#TcaPropertyIDTawtheeq').append(propertyidTawtheeqOptions);
                       $('#TcaPropertyName').append(propertyNameOptions);
                       $('#UnitIDTawtheeq').append(unitidOptions);
                       $('#UnitPropertyName').append(unitnameOptions);
                   },
                   error: function (jqXhr, textStatus, errorThrown) {
                       alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                   },
                   complete: function () {
                       // $("#").addClass("hide");
                   }

               });
    });

    $("#Tenant_Type").on('change', function (e) {
         
        var Tenant_Type = $("#Tenant_Type").val();
        $("#Ag_Tenant_id").val(null);
        $("#Ag_Tenant_Name").val(null);
        if (Tenant_Type != "" && Tenant_Type != null) {
            $.ajax(
                {
                    url: "../Tca/GetTenentDetails",
                    // dataType: "jsonp",
                    method: "GET",
                    data: { Type: $("#Tenant_Type").val() }, //FormData(form.get(0)),
                    contentType: "application/json",

                    success: function (response) {
                         
                        if (response != null) {
                            $("#Ag_Tenantid").empty();
                            $("#Ag_TenantName").empty();
                            var tenantIdoptions = '<option value="" selected>--Select--</option>';
                            var tenantNameoptions = '<option value="" selected>--Select--</option>';
                            $.each(response, function (index, data) {
                                tenantIdoptions += '<option value="' + data.Tenant_Id + '">' + data.Tenant_Id + '</option>';
                                tenantNameoptions += '<option value="' + data.Tenant_Id + '">' + data.Tenant_Name + '</option>';
                            });
                            $('#Ag_Tenantid').append(tenantIdoptions);
                            $('#Ag_TenantName').append(tenantNameoptions);
                        }
                    },
                    error: function (jqXhr, textStatus, errorThrown) {
                        alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                    },
                    complete: function () {
                        // $("#").addClass("hide");
                    }

                });
        }
    });

    $("#SecurityFlag").change(function () {
         
        var SecurityFlag = $("#SecurityFlag").val();
        if (SecurityFlag != undefined && (SecurityFlag == "Cheque" || SecurityFlag == "Online" || SecurityFlag == "Cheque without date")) {
            $('#Security_chequeno').removeAttr('disabled');
            $('#Security_chequedate').removeAttr('disabled');
            //$("SecurityChequeno").prop("disabled", false);
            //$("SecurityChequedate").prop("disabled", false);
        }
        else {
            $('#Security_chequeno').attr('disabled', true);
            $('#Security_chequedate').attr('disabled', true);
        }
        return;
    });

    $("#Ag_Tenantid").change(function () {
         
        var tenantid = $("#Ag_Tenantid").val();
        $("#Ag_TenantName").val($("#Ag_Tenantid option:selected").val());

        $("#Ag_Tenant_id").val($("#Ag_Tenantid option:selected").text() == "--Select--" ? null : $("#Ag_Tenantid option:selected").text());
        $("#Ag_Tenant_Name").val($("#Ag_TenantName option:selected").text() == "--Select--" ? null : $("#Ag_TenantName option:selected").text());
       // $("#Ag_Tenant_Name").val($("#Ag_Tenant_id option:selected").text());
        return;
    });
    $("#Ag_TenantName").change(function () {
        var tenantid = $("#Ag_TenantName").val();
        $("#Ag_Tenantid").val($("#Ag_TenantName option:selected").val());
        $("#Ag_Tenant_id").val($("#Ag_Tenantid option:selected").text() == "--Select--" ? null : $("#Ag_Tenantid option:selected").text());
        $("#Ag_Tenant_Name").val($("#Ag_TenantName option:selected").text() == "--Select--" ? null : $("#Ag_TenantName option:selected").text());
        //$("#Ag_Tenant_id").val($("#Ag_Tenant_Name option:selected").text());
        return;
    });

    $("#Caretakerid").change(function () {
        var Caretakerid = $("#Caretakerid").val();
        $("#CaretakerName").val($("#Caretakerid option:selected").val());

        $("#Caretaker_id").val($("#Caretakerid option:selected").text() == "--Select--" ? null : $("#Caretakerid option:selected").text());
        $("#Caretaker_Name").val($("#CaretakerName option:selected").text() == "--Select--" ? null : $("#CaretakerName option:selected").text());

        // $("#Ag_Tenant_Name").val($("#Ag_Tenant_id option:selected").text());
        return;
    });
    $("#CaretakerName").change(function () {
        var Caretakerid = $("#CaretakerName").val();
        $("#Caretakerid").val($("#CaretakerName option:selected").val());

        $("#Caretaker_id").val($("#Caretakerid option:selected").text() == "--Select--" ? null : $("#Caretakerid option:selected").text());
        $("#Caretaker_Name").val($("#CaretakerName option:selected").text() == "--Select--" ? null : $("#CaretakerName option:selected").text());
        //$("#Ag_Tenant_id").val($("#Ag_Tenant_Name option:selected").text());
        return;
    });

    $("#TcaPropertyIDTawtheeq").change(function () {
        var propertyid = $("#TcaPropertyIDTawtheeq").val();
        $("#TcaPropertyName").val($("#TcaPropertyIDTawtheeq option:selected").val());
        $("#UnitIDTawtheeq").val($("#TcaPropertyIDTawtheeq option:selected").val());
        $("#UnitPropertyName").val($("#TcaPropertyIDTawtheeq option:selected").val());
        $("#property_id").val(propertyid);
        setpropertyFields();
        // $("#Ag_Tenant_Name").val($("#Ag_Tenant_id option:selected").text());
        return;
    });
    $("#TcaPropertyName").change(function () {
        var propertyid = $("#TcaPropertyName").val();
        $("#TcaPropertyIDTawtheeq").val($("#TcaPropertyName option:selected").val());
        $("#UnitIDTawtheeq").val($("#TcaPropertyName option:selected").val());
        $("#UnitPropertyName").val($("#TcaPropertyName option:selected").val());
        $("#property_id").val(propertyid);
        setpropertyFields();
        //$("#Ag_Tenant_id").val($("#Ag_Tenant_Name option:selected").text());
        return;
    });

    $("#UnitIDTawtheeq").change(function () {
        //var propertyid = $("#UnitIDTawtheeq").val();
        //$("#TcaPropertyIDTawtheeq").val($("#UnitIDTawtheeq option:selected").val());
        //$("#TcaPropertyName").val($("#UnitIDTawtheeq option:selected").val());
        //$("#UnitPropertyName").val($("#UnitIDTawtheeq option:selected").val());
        //$("#property_id").val(propertyid);
        setunitFields();
        //$("#Ag_Tenant_id").val($("#Ag_Tenant_Name option:selected").text());
        $("#UnitPropertyName").val($("#Property_ID_Tawtheeq option:selected").text() == "--Select--" ? null : $("#UnitIDTawtheeq").val());
        setunitFields();
        return;
    });

    $("#UnitPropertyName").change(function () {
        
        $("#UnitIDTawtheeq").val($("#UnitPropertyName option:selected").text() == "--Select--" ? null : $("#UnitPropertyName").val());
       setunitFields();
        //$("#Ag_Tenant_id").val($("#Ag_Tenant_Name option:selected").text());
        return;
    });

    $(document).ready(function () {
         
        if ($("#single")[0].checked) {
            $("#single").prop('checked', true).change();
            //$("select option").prop("selected", false);
        }
        else {
            $("#multiple").prop('checked', true).change();
            //$("select option").prop("selected", false);
        }
        //$("#property").prop('checked', true).change();
    });
    function setpropertyFields() {
        $("#Property_ID_Tawtheeq").val($("#TcaPropertyIDTawtheeq option:selected").text() == "--Select--" ? null : $("#TcaPropertyIDTawtheeq option:selected").text());
        $("#Properties_Name").val($("#TcaPropertyName option:selected").text() == "--Select--" ? null : $("#TcaPropertyName option:selected").text());
        var propertyid =parseInt($("#property_id").val());
       // alert(propertyid);
        if($.isNumeric(propertyid))
        {
            getUnit(propertyid);
            GetPropertyOnChange();
        }  
    }
    function getUnit(propertyId)
    {
        $.ajax(
               {
                   url: "../Tca/GetPropertiesUnitDetails",
                   // dataType: "jsonp",
                   method: "GET",
                   data: { propertyId: propertyId }, //FormData(form.get(0)),
                   contentType: "application/json",

                   success: function (response) {
                        
                       //var propertyidOptions = '<option value="" selected>--Select--</option>';
                       //$("#TcaPropertyId").empty();

                       //var propertyidTawtheeqOptions = '<option value="" selected>--Select--</option>';
                       //$("#TcaPropertyIDTawtheeq").empty();

                       var propertyNameOptions = '<option value="" selected>--Select--</option>';
                       //$("#TcaPropertyName").empty();

                       var unitidOptions = '<option value="" selected>--Select--</option>';
                       $("#UnitIDTawtheeq").empty();

                       var unitnameOptions = '<option value="" selected>--Select--</option>';
                       $("#UnitPropertyName").empty();

                       $.each(response, function (index, data) {
                           //propertyidOptions += '<option value="' + data.property_id + '">' + data.property_id + '</option>';
                           //propertyidTawtheeqOptions += '<option value="' + data.Property_ID_Tawtheeq + '">' + data.Property_ID_Tawtheeq + '</option>';
                           // propertyNameOptions += '<option value="' + data.Property_ID_Tawtheeq + '">' + data.Property_Name + '</option>';

                           unitidOptions += '<option value="' + data.Value + '">' + data.Value + '</option>';
                           unitnameOptions += '<option value="' + data.Value + '">' + data.Text + '</option>';

                       });
                       //$('#TcaPropertyIDTawtheeq').append(propertyidTawtheeqOptions);
                       //$('#TcaPropertyName').append(propertyNameOptions);
                       $('#UnitIDTawtheeq').append(unitidOptions);
                       $('#UnitPropertyName').append(unitnameOptions);
                   },
                   error: function (jqXhr, textStatus, errorThrown) {
                       alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                   },
                   complete: function () {
                       // $("#").addClass("hide");
                   }

               });
    }
    function setunitFields()
    {
        $("#Unit_ID_Tawtheeq").val($("#UnitIDTawtheeq option:selected").text() == "--Select--" ? null : $("#UnitIDTawtheeq option:selected").text());
        $("#Unit_Property_Name").val($("#UnitPropertyName option:selected").text() == "--Select--" ? null : $("#UnitIDTawtheeq option:selected").text());
    }
    $("#Agreement_Start_Date").change(function () {
        setContractAmountPerDay();
    });
    $("#Agreement_End_Date").change(function () {
        setContractAmountPerDay();
    });
    $("#Total_Rental_amount").change(function () {
        setContractAmountPerDay();
    });
    setContractAmountPerDay();
    function setContractAmountPerDay()
    {
        var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds
        var firstDate = new Date($("#Agreement_Start_Date").val());
        var secondDate = new Date($("#Agreement_End_Date").val());
        var Total_Rental_amount = parseFloat($("#Total_Rental_amount").val());
        var diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));
        var amountperday = 0.0;
        if (firstDate < secondDate)
        {
            if (diffDays > 0) {
                amountperday = (Total_Rental_amount / (diffDays+1)).toFixed(2);
            }
        }
        else if(firstDate.getDate() == secondDate.getDate())
        {
            amountperday = Total_Rental_amount;
        }
        
        $("#Perday_Rental").val(amountperday);
    }
    //GetPropertyOnChange
    function GetPropertyOnChange()
    {
        if($("#TcaPropertyName").val()=="")
        {
            return;
        }
        $.ajax(
        {
            url: "../Tca/GetPropertyOnChange",
            // dataType: "jsonp",
            method: "GET",
            data: { propertyId: $("#TcaPropertyName").val() }, //FormData(form.get(0)),
            contentType: "application/json",
            success: function (response) {
                if (response != null) {
                    $.each(response, function (index, data) {
                        $("#Caretaker_id").val(data.Caretaker_ID);
                        $("#Caretaker_Name").val(data.Caretaker_Name);
                        $("#Vacantstartdate").val(data.Vacantstartdate);
                        //break;
                    });
                }

            }
        });

    }
</script>



