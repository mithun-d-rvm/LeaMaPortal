<!--
  File Name      : _AgreementForm.cshtml
  Description    : Agreement Details partial view
  Created Date   : 25-Mar-2017
  Notes          : <Notes>
-->

@model LeaMaPortal.Models.AgreementFormViewModel
@*@using (Html.BeginForm("AddOrUpdate", "Tca", FormMethod.Post, new { @id = "Tca", @enctype = "multipart/form-data" }))*@
@{
    @Html.HiddenFor(model=>model.Ag_Tenant_id)
    @Html.HiddenFor(x => x.Ag_Tenant_Name)
    @*@Html.HiddenFor(x=>x.property_id)*@
    @Html.HiddenFor(x=>x.Property_ID_Tawtheeq)
    @Html.HiddenFor(x =>x.Properties_Name)
    @Html.HiddenFor(x=>x.Unit_ID_Tawtheeq)
    @Html.HiddenFor(x=>x.Unit_Property_Name)
    @Html.HiddenFor(x => x.Security_Flag)
    @Html.HiddenFor(x => x.Security_chequeno)
    @Html.HiddenFor(x => x.Security_chequedate)
    @*<input type="hidden" name="hdnUnit_ID_Tawtheeq" id="hdnUnit_ID_Tawtheeq"/>
    <input type="hidden" name="hdnUnit_Property_Name" id="hdnUnit_Property_Name" />*@
    @*@Html.HiddenFor(x=>x.Caretaker_id)
    @Html.HiddenFor(x=>x.Caretaker_Name)*@
    <div class="font-smaller">
        @Html.HiddenFor(m => m.New_Renewal_flag)
        <div class="text-uppercase">
            <span class="font-x-large"> <strong> Agreement </strong> </span>
            @*<div class="pull-right m-t-15">
                <span class="document-btn print-btn" data-toggle="modal" data-target="#contractModal"> Print Contract </span>
            </div>*@
        </div>
        <div class="p-b-25"> &nbsp; </div>
        <div class="row">
            <div class="col-md-6 ht-50">
                <div class="col-md-12 p-b-7">
                    <div class="col-md-3 m-t-3">
                        <span> Single Unit </span>
                    </div>
                    <div class="col-md-1">
                        @Html.RadioButtonFor(model => model.Single_Multiple_Flag, "Single", new {@class = "input-checkbox",@required= "required",@id="single" })
                    </div>
                    <div class="col-md-4 m-t-3">
                        <span> Multiple Unit </span>
                    </div>
                    <div class="col-md-1 m-l-m-40">
                        @Html.RadioButtonFor(model => model.Single_Multiple_Flag, "Multiple", new {@class = "input-checkbox", @required = "required", @id = "multiple" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                @*<div class="col-md-12 p-b-7">
                        <div class="col-md-6">
                            Existing Contract Agreement:
                        </div>
                        <div class="col-md-6">
                            <select class="master-form-input form-control">
                                <option> Agreement 1 </option>
                                <option> Agreement 2 </option>
                                <option> Agreement 3 </option>
                            </select>
                        </div>
                    </div>*@
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Agreement_No, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.HiddenFor(model => model.Agreement_No)
                        <input type="text" value="@ViewBag.Agreement_No" disabled class="master-form-input form-control" />
                        @*@Html.EditorFor(model => model.Agreement_No, new { htmlAttributes = new { @class = "master-form-input" } })*@
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Agreement_Date, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*@Html.EditorFor(model => model.Agreement_Date, new { htmlAttributes = new { @class = "master-form-input" } })*@
                        @Html.EditorFor(model => model.Agreement_Date, new { htmlAttributes = new { @class = "master-form-input form-control" } })
                        @Html.ValidationMessageFor(model => model.Agreement_Date, "", new { @class = "text-danger", @required = "required" })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Tenant_Type, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.DropDownList("Tenant_Type", null, "-- Select --", new { @class = "master-form-input form-control", @required = "required" })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Ag_Tenant_id, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<input type="text" class="master-form-input form-control" />*@
                        @Html.DropDownList("Ag_Tenantid", null, "-- Select --", new { @class = "master-form-input form-control", @Name = "Ag_Tenant_id", @required = "required" })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Ag_Tenant_Name, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<input type="text" class="master-form-input form-control" />*@
                        @Html.DropDownList("Ag_TenantName", null, "-- Select --", new { @class = "master-form-input form-control", @Name = "Ag_Tenant_Name", @required = "required" })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Caretaker_id, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<input type="text" class="master-form-input form-control" />*@
                        @Html.EditorFor(m => m.Caretaker_id, new { htmlAttributes = new { @class = "master-form-input form-control", @readonly = "readonly", @required = "required" } })
                        @*@Html.DropDownList("Caretakerid", null, "-- Select --", new { @class = "master-form-input form-control", @required = "required" })*@
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Caretaker_Name, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<input type="text" class="master-form-input form-control" />*@
                        @Html.EditorFor(m => m.Caretaker_Name, new { htmlAttributes = new { @class = "master-form-input form-control",@readonly = "readonly", @required = "required" } })
                        @*@Html.DropDownList("CaretakerName", null, "-- Select --", new { @class = "master-form-input form-control", @required = "required" })*@
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.property_id, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<input type="text" class="master-form-input form-control" />*@
                        @Html.EditorFor(model=>model.property_id, new { htmlAttributes = new { @class = "master-form-input form-control", @readonly="readonly", @required = "required" } })
                        @*@Html.DropDownList("TcaPropertyId", null, "-- Select --", new { @class = "master-form-input" })*@
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Property_ID_Tawtheeq, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<input type="text" class="master-form-input form-control" />*@
                        @Html.DropDownList("TcaPropertyIDTawtheeq", null, "-- Select --", new { @class = "master-form-input form-control", @disabled = "disabled" })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Properties_Name, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<input type="text" class="master-form-input form-control" />*@
                        @Html.DropDownList("TcaPropertyName", null, "-- Select --", new { @class = "master-form-input form-control" })
                        <input type="hidden" id="hdnPropUntMonthlyRentPerDay" />
                        <input type="hidden" id="hdnPropMonthlyRent" />
                        <input type="hidden" id="hdnUnitMonthlyRent" />
                        <input type="hidden" id="hdnDateDiff"/>
                        <input type="hidden" id="hdnPropUnitMonthlyRent" />
                    </div>
                </div>
                <div class="col-md-12 p-b-7" id="divUnitPropertyId">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Unit_ID_Tawtheeq, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<input type="text" class="master-form-input form-control" />*@
                        @Html.DropDownList("TcaUnitIDTawtheeq", null, "-- Select --", new { @class = "master-form-input form-control", @disabled = "disabled" })
                    </div>
                </div>
                <div class="col-md-12 p-b-7" id="divUnitpropertyname">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Unit_Property_Name, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<input type="text" class="master-form-input form-control" />*@
                        @Html.DropDownList("TcaUnitPropertyName", null, "-- Select --", new { @class = "master-form-input form-control", @disabled = "disabled" })
                    </div>
                </div>
            </div>



            <div class="col-md-6">
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Vacantstartdate, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Vacantstartdate, new { htmlAttributes = new { @class = "master-form-input form-control",@readonly= "readonly" } })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Agreement_Start_Date, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Agreement_Start_Date, new { htmlAttributes = new { @class = "master-form-input form-control", @required = "required", @onblur = "setMinForAgreementDate()" } })
                    </div>
                </div>
                <div class="col-md-12 p-b-7"> 
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Agreement_End_Date, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Agreement_End_Date, new { htmlAttributes = new { @class = "master-form-input form-control", @required = "required" } })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Total_Rental_amount, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Total_Rental_amount, new { htmlAttributes = new { @class = "master-form-input form-control", @onkeypress = "allow_only_Float(event,'Total_Rental_amount');", @required = "required" } })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Perday_Rental, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Perday_Rental, new { htmlAttributes = new { @class = "master-form-input form-control", @onkeypress = "allow_only_Float(event,'Perday_Rental');", @required = "required",@readonly= "readonly" } })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.nofopayments, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.nofopayments, new { htmlAttributes = new { @class = "master-form-input form-control", @onkeypress = "allow_only_numbers(event);", @required = "required",@min="0" } })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Advance_Security_Amount, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Advance_Security_Amount, new { htmlAttributes = new { @class = "master-form-input form-control",@onkeypress = "allow_only_Float(event,'Advance_Security_Amount');",@required= "required"} })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Security_Flag, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @*<select class="master-form-input form-control">
                                <option> Payment 1 </option>
                                <option> Payment 2 </option>
                                <option> Payment 3 </option>
                            </select>*@
                        @Html.DropDownList("SecurityFlag", null, new { @class = "master-form-input form-control", @required = "required" })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Security_chequeno, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Security_chequeno, new { htmlAttributes = new { @class = "master-form-input form-control", @Name = "SecurityChequeno",@id = "Securitycheq", disabled = "disabled" } })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Security_chequedate, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Security_chequedate, new { htmlAttributes = new { @class = "master-form-input form-control", @Name = "SecurityChequedate", @id = "SecuritycheqDate",disabled = "disabled" } })
                    </div>
                </div>
                <div class="col-md-12 p-b-7">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.Notice_Period, htmlAttributes: new { @class = "label-default-remove" })
                    </div>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Notice_Period, new { htmlAttributes = new { @class = "master-form-input form-control", @onkeypress = "allow_only_numbers(event);", @min = "0" } })  
                    </div>
                </div>

            </div>
        </div>
        <div class="p-t-5-p">
            &nbsp;
        </div>
        
     
    </div>
}
<script>
    function setMinForAgreementDate() {

        var to = $("#Agreement_Start_Date").val();
        if (to != "") {
            $("#Agreement_End_Date").prop('min', to);
        }
    }
    singleOrMultiple();
    function singleOrMultiple()
    {  
        var value = $('input[type=radio][name=Single_Multiple_Flag]').val();
        if (value == 'Multiple') {
            //$('#UnitIDTawtheeq').attr('disabled', true);
            //$('#UnitPropertyName').attr('disabled', true);
          
            $("#divUnitPropertyId").hide();
            $("#divUnitpropertyname").hide();
            $("#AgreementUnit").show();
            //$("#TcaPropertyIDTawtheeq").empty();
        }
        else {
            //$('#UnitIDTawtheeq').removeAttr('disabled');
            //$('#UnitPropertyName').removeAttr('disabled');
           
            $("#divUnitPropertyId").show();
            $("#divUnitpropertyname").show();
            $("#AgreementUnit").hide();
            $("TcaUnitPropertyName").prop("disabled", true);
            //$("#TcaPropertyIDTawtheeq").empty();
        }
    }
    $('input[type=radio][name=Single_Multiple_Flag]').change(function () {
        singleOrMultiple();
        if (this.value == 'Multiple') {
            //$('#UnitIDTawtheeq').attr('disabled', true);
            //$('#UnitPropertyName').attr('disabled', true);
            $("#divUnitPropertyId").hide();
            $("#divUnitpropertyname").hide();
            $("#AgreementUnit").show();
            
        }
        else {
            //$('#UnitIDTawtheeq').removeAttr('disabled');
            //$('#UnitPropertyName').removeAttr('disabled');
            $("#divUnitPropertyId").show();
            $("#divUnitpropertyname").show();
            $("#AgreementUnit").hide();
            
        }
        $("#property_id").val(null);
        $.ajax(
               {
                   url: "../Tca/GetPropertiesDetails",
                   // dataType: "jsonp",
                   method: "GET",
                   data: { Type: this.value, flg: 0 }, //FormData(form.get(0)),
                   contentType: "application/json",

                   success: function (response) {

                       var propertyidTawtheeqOptions = '<option value="" selected>--Select--</option>';
                       $("#TcaPropertyIDTawtheeq").empty();

                       $.each(response, function (index, data) {
                           propertyidTawtheeqOptions += '<option value="' + data.property_id + '">' + data.Property_ID_Tawtheeq + '</option>';
                       });
                       $('#TcaPropertyIDTawtheeq').append(propertyidTawtheeqOptions);
                   },

                   error: function (jqXhr, textStatus, errorThrown) {
                       alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                   },
                   complete: function () {
                       // $("#").addClass("hide");
                   }

               }
            );
        $.ajax(
                {
                    url: "../Tca/GetPropertiesDetails",
                    method: "GET",
                    data: { Type: this.value, flg: 1},
                    contentType: "application/json",

                    success: function (response) {

                        var propertyNameOptions = '<option value="" selected>--Select--</option>';
                        $("#TcaPropertyName").empty();

                        $.each(response, function (index, data){
                            propertyNameOptions += '<option value="' + data.property_id + '">' + data.Property_Name + '</option>';
                        });
                        $('#TcaPropertyName').append(propertyNameOptions);
                    },

                    error: function (jqXhr, textStatus, errorThrown){
                        alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                    },
                    complete: function () {

                    }
                }
            );
        $.ajax(
                {
                    url: "../Tca/GetPropertiesDetails",
                    method: "GET",
                    data: { Type: this.value, flg: 2},
                    contentType: "application/json",

                    success: function (response) {

                        var unitidOptions = '<option value="" selected>--Select--</option>';
                        $("#TcaUnitIDTawtheeq").empty();

                        $.each(response, function (index, data){
                            if (this.value != 'Multiple') {
                                unitidOptions += '<option value="' + data.Ref_Unit_Property_ID + '">' + data.Unit_ID_Tawtheeq + '</option>';
                                
                              }
                        });
                        $('#TcaUnitIDTawtheeq').append(unitidOptions);
                    },

                    error: function (jqXhr, textStatus, errorThrown){
                        alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                    },
                    complete: function () {

                    }
                }
            );
        $.ajax(
               {
                   url: "../Tca/GetPropertiesDetails",
                   method: "GET",
                   data: { Type: this.value, flg: 3},
                   contentType: "application/json",

                   success: function (response) {

                       var unitnameOptions = '<option value="" selected>--Select--</option>';
                       $("#TcaUnitPropertyName").empty();

                       $.each(response, function (index, data){
                           if (this.value != 'Multiple') {
                               unitnameOptions += '<option value="' + data.Unit_ID_Tawtheeq + '">' + data.Unit_Property_Name + '</option>';
                           }
                       });
                       $('#TcaUnitPropertyName').append(unitnameOptions);
                   },

                   error: function (jqXhr, textStatus, errorThrown){
                       alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                   },
                   complete: function () {

                   }
               }
           );

        

                   //success: function (response) {
                        
                   //    //var propertyidOptions = '<option value="" selected>--Select--</option>';
                   //    //$("#TcaPropertyId").empty();

                   //    var propertyidTawtheeqOptions = '<option value="" selected>--Select--</option>';
                   //    $("#TcaPropertyIDTawtheeq").empty();

                   //    var propertyNameOptions = '<option value="" selected>--Select--</option>';
                   //    $("#TcaPropertyName").empty();

                   //    var unitidOptions = '<option value="" selected>--Select--</option>';
                   //    $("#UnitIDTawtheeq").empty();

                   //    var unitnameOptions = '<option value="" selected>--Select--</option>';
                   //    $("#UnitPropertyName").empty();

                   //    $.each(response, function (index, data) {
                   //        //propertyidOptions += '<option value="' + data.property_id + '">' + data.property_id + '</option>';
                   //        propertyidTawtheeqOptions += '<option value="' + data.property_id + '">' + data.Property_ID_Tawtheeq + '</option>';
                   //        propertyNameOptions += '<option value="' + data.property_id + '">' + data.Property_Name + '</option>';
                   //        if (this.value != 'Multiple') {
                   //            unitidOptions += '<option value="' + data.property_id + '">' + data.Unit_ID_Tawtheeq + '</option>';
                   //            unitnameOptions += '<option value="' + data.property_id + '">' + data.Unit_Property_Name + '</option>';
                   //        }
                   //    });
                       
                   //    $('#TcaPropertyIDTawtheeq').append(propertyidTawtheeqOptions);
                   //    //$('#TcaPropertyIDTawtheeq').empty();
                   //    $('#TcaPropertyName').append(propertyNameOptions);
                   //    $('#UnitIDTawtheeq').append(unitidOptions);
                   //    $('#UnitPropertyName').append(unitnameOptions);
                   //},
                   

              


               //);
    });

    $("#Tenant_Type").on('change', function (e) {
         
        var Tenant_Type = $("#Tenant_Type").val();
        $("#Ag_Tenant_id").val(null);
        $("#Ag_Tenant_Name").val(null);
        if (Tenant_Type != "" && Tenant_Type != null) {
            $.ajax(
                {
                    url: "../Tca/GetTenentDetails",
                    // dataType: "jsonp",
                    method: "GET",
                    data: { Type: $("#Tenant_Type").val() }, //FormData(form.get(0)),
                    contentType: "application/json",

                    success: function (response) {
                         
                        if (response != null) {
                            $("#Ag_Tenantid").empty();
                            $("#Ag_TenantName").empty();
                            var tenantIdoptions = '<option value="" selected>--Select--</option>';
                            var tenantNameoptions = '<option value="" selected>--Select--</option>';
                            $.each(response, function (index, data) {
                                tenantIdoptions += '<option value="' + data.Tenant_Id + '">' + data.Tenant_Id + '</option>';
                                tenantNameoptions += '<option value="' + data.Tenant_Id + '">' + data.Tenant_Name + '</option>';
                            });
                            $('#Ag_Tenantid').append(tenantIdoptions);
                            $('#Ag_TenantName').append(tenantNameoptions);
                        }
                    },
                    error: function (jqXhr, textStatus, errorThrown) {
                        alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                    },
                    complete: function () {
                        // $("#").addClass("hide");
                    }

                });
        }
    });

    $("#SecurityFlag").change(function () {
         
        var SecurityFlag = $("#SecurityFlag").val();
        //if (SecurityFlag != undefined && (SecurityFlag == "Cheque" || SecurityFlag == "Online" || SecurityFlag == "Cheque without date")) {
        if (SecurityFlag != undefined && (SecurityFlag != "Cash" )) {
            //$('#Security_chequeno').removeAttr('disabled');
            //$('#Security_chequedate').removeAttr('disabled');

            $('#Securitycheq').removeAttr('disabled');
            $('#SecuritycheqDate').removeAttr('disabled');

            //$("SecurityChequeno").prop("disabled", false);
            //$("SecurityChequedate").prop("disabled", false);
        }
        else {
            //$('#Security_chequeno').attr('disabled', true);
            //$('#Security_chequedate').attr('disabled', true);

            $('#Securitycheq').attr('disabled', true);
            $('#SecuritycheqDate').attr('disabled', true);
        }
        return;
    });

    $("#Ag_Tenantid").change(function () {
         
        //var tenantid = $("#Ag_Tenantid").val();
        $("#Ag_TenantName").val($("#Ag_Tenantid option:selected").val());

        $("#Ag_Tenant_id").val($("#Ag_Tenantid option:selected").text() == "--Select--" ? null : $("#Ag_Tenantid option:selected").text());
        $("#Ag_Tenant_Name").val($("#Ag_TenantName option:selected").text() == "--Select--" ? null : $("#Ag_TenantName option:selected").text());
        //alert($("#Ag_Tenant_id").val());
        //alert($("#Ag_TenantName").val());
       // $("#Ag_Tenant_Name").val($("#Ag_Tenant_id option:selected").text());
        return;
    });
    $("#Ag_TenantName").change(function () {
        //var tenantid = $("#Ag_TenantName").val();
        $("#Ag_Tenantid").val($("#Ag_TenantName option:selected").val());
        $("#Ag_Tenant_id").val($("#Ag_Tenantid option:selected").text() == "--Select--" ? null : $("#Ag_Tenantid option:selected").text());
        $("#Ag_Tenant_Name").val($("#Ag_TenantName option:selected").text() == "--Select--" ? null : $("#Ag_TenantName option:selected").text());
        //$("#Ag_Tenant_id").val($("#Ag_Tenant_Name option:selected").text());
        return;
    });

    //$("#Caretakerid").change(function () {
    //    var Caretakerid = $("#Caretakerid").val();
    //    $("#CaretakerName").val($("#Caretakerid option:selected").val());

    //    $("#Caretaker_id").val($("#Caretakerid option:selected").text() == "--Select--" ? null : $("#Caretakerid option:selected").text());
    //    $("#Caretaker_Name").val($("#CaretakerName option:selected").text() == "--Select--" ? null : $("#CaretakerName option:selected").text());

    //    // $("#Ag_Tenant_Name").val($("#Ag_Tenant_id option:selected").text());
    //    return;
    //});
    //$("#CaretakerName").change(function () {
    //    var Caretakerid = $("#CaretakerName").val();
    //    $("#Caretakerid").val($("#CaretakerName option:selected").val());

    //    $("#Caretaker_id").val($("#Caretakerid option:selected").text() == "--Select--" ? null : $("#Caretakerid option:selected").text());
    //    $("#Caretaker_Name").val($("#CaretakerName option:selected").text() == "--Select--" ? null : $("#CaretakerName option:selected").text());
    //    //$("#Ag_Tenant_id").val($("#Ag_Tenant_Name option:selected").text());
    //    return;
    //});

    //$("#TcaPropertyIDTawtheeq").change(function () {
    //    var propertyid = $("#TcaPropertyIDTawtheeq").val();
    //    //alert(propertyid);

    //    $("#property_id").val(propertyid);
    //    $("#TcaPropertyName").val(propertyid);
    //    $("#UnitIDTawtheeq").val(propertyid);       
    //    $("#UnitPropertyName").val(propertyid);
    //    //$("#TcaPropertyName").val($("#TcaPropertyIDTawtheeq option:selected").val());
    //    //$("#UnitIDTawtheeq").val($("#TcaPropertyIDTawtheeq option:selected").val());
    //    //$("#UnitPropertyName").val($("#TcaPropertyIDTawtheeq option:selected").val());
    //    //$("#property_id").val(propertyid);
    //    setpropertyFields();
    //    // $("#Ag_Tenant_Name").val($("#Ag_Tenant_id option:selected").text());
    //    return;
    //});
    $("#TcaPropertyName").change(function () {
        debugger;
        var propertyid = $("#TcaPropertyName").val();
        if ($("#single").prop('checked') == true)
        {

            if ($("#TcaPropertyName option:selected").text() == "--Select--") {
                $("#TcaUnitPropertyName").attr("disabled", true);
            }
            else if ($("#TcaPropertyName option:selected").text() != "--Select--") {
                $("#TcaUnitPropertyName").attr("disabled", false);
            }
        }
        else
        {
            //alert("hi");
            $("#AgreementUnit #Properties_Name").val($("#TcaPropertyName option:selected").val());
            $("#AgreementUnit #Property_ID").val(propertyid);
            $("#AgreementUnit #Property_ID_Tawtheeq").val($("#TcaPropertyName option:selected").val());
            $("#AgreementUnit #Properties_Name").trigger("change");

        }
        
        

        $("#TcaPropertyIDTawtheeq").val($("#TcaPropertyName option:selected").val());
        $("#property_id").val(propertyid);
        setpropertyFields();
        getmonthrentamt("Property");
        //var proprent = $("hdnPropMonthlyRent").val();
        //proprent = parseFloat(proprent).toFixed(2);
        //proprent = Math.ceil(proprent);
       
        return;
        //$("#UnitIDTawtheeq").val($("#TcaPropertyName option:selected").val());
       // $("#UnitPropertyName").val($("#TcaPropertyName option:selected").val());


        //$("#Ag_Tenant_id").val($("#Ag_Tenant_Name option:selected").text());
    });

    //$("#UnitIDTawtheeq").change(function () {
    //    var propertyid = $("#UnitIDTawtheeq").val();

    //    $("#TcaPropertyIDTawtheeq").val(propertyid);
    //    $("#TcaPropertyName").val(propertyid);
    //    //$("#UnitPropertyName").val(propertyid);
    //    $("#property_id").val(propertyid);
    //    setunitFields();
    //    //$("#Ag_Tenant_id").val($("#Ag_Tenant_Name option:selected").text());
    //    //alert($("#UnitIDTawtheeq option:selected").text());
    //    $("#UnitPropertyName").val($("#UnitIDTawtheeq option:selected").text() == "--Select--" ? null : $("#UnitIDTawtheeq  option:selected").text());
    //    setunitFields();
    //    return;
    //});

    $("#TcaUnitPropertyName").change(function () {
        $("#TcaUnitIDTawtheeq option:selected").text($("#TcaUnitPropertyName option:selected").text() == "--Select--" ? "--Select--" : $("#TcaUnitPropertyName").val());


        $("#Unit_ID_Tawtheeq").val($("#TcaUnitIDTawtheeq option:selected").text() == "--Select--" ? null : $("#TcaUnitIDTawtheeq option:selected").text());
        //alert($("#Unit_ID_Tawtheeq").val());
        $("#Unit_Property_Name").val($("#TcaUnitPropertyName option:selected").text() == "--Select--" ? null : $("#TcaUnitPropertyName option:selected").text());
        //alert($("#Unit_Property_Name").val());
        // setunitFields();

       // $("#UnitPropertyName option:selected").text($("#UnitPropertyName option:selected").text() == "--Select--" ? "--Select--" : $("#UnitPropertyName").val());
        //var propertyid = $("#UnitIDTawtheeq option:selected").val();
        //$("#TcaPropertyIDTawtheeq").val(propertyid);
        //$("#TcaPropertyName").val(propertyid);
        //$("#property_id").val(propertyid);
        
        //$("#Ag_Tenant_id").val($("#Ag_Tenant_Name option:selected").text());
        getmonthrentamt("Unit");
        return;
    });


    function getmonthrentamt(type)
    {
        $.ajax(
            {
                url: "../Tca/GetPropertyUnitMonthlyRent",
                // dataType: "jsonp",
                method: "GET",
                data: { PropertyID: $("#TcaPropertyName").val(), UnitTawtheeqID: $("#TcaUnitPropertyName").val(), PropUnitFlag:type }, //FormData(form.get(0)),
                contentType: "application/json",

                success: function (response) {

                    //var propertyidTawtheeqOptions = '<option value="" selected>--Select--</option>';
                    //$("#TcaPropertyIDTawtheeq").empty();

                    //$.each(response, function (index, data) {
                    //    propertyidTawtheeqOptions += '<option value="' + data.property_id + '">' + data.Property_ID_Tawtheeq + '</option>';
                    //});
                    //$('#TcaPropertyIDTawtheeq').append(propertyidTawtheeqOptions);
                    //debugger;
                    var propmonthrent;
                    var unitmonthrent;
                    //var propflag;
                    $.each(response, function (index, data) {
                        propmonthrent = data.Rental_Rate_Month;
                        unitmonthrent = data.Rental_Rate_Month_unit;                       
                    });
                    propmonthrent = propmonthrent / 30;
                    unitmonthrent = unitmonthrent / 30;

                    if (type == "Property")
                    {
                        $("#hdnPropMonthlyRent").val(propmonthrent);
                        $("#hdnPropUntMonthlyRentPerDay").val(propmonthrent);
                        $("#hdnPropUnitMonthlyRent").val(propmonthrent * 30);
                    }
                    else if (type == "Unit")
                    {
                        $("#hdnUnitMonthlyRent").val(unitmonthrent);
                        $("#hdnPropUntMonthlyRentPerDay").val(unitmonthrent);
                        $("#hdnPropUnitMonthlyRent").val(unitmonthrent * 30);
                    }
                    var tst = $("#hdnPropUntMonthlyRentPerDay").val();
                    tst = parseFloat(tst).toFixed(2);
                    //tst = Math.ceil(tst);
                    $("#hdnPropUntMonthlyRentPerDay").val(tst);
                    //alert($("#hdnPropUntMonthlyRentPerDay").val());

                    //$("#hdnUnitMonthlyRent").val(unitmonthrent);
                    //alert($("#hdnPropMonthlyRent").val());
                    //alert($("#hdnUnitMonthlyRent").val());
                    
                    //debugger;
                    //alert(tst);
                    
                   

                    //alert(parseFloat(tst).toFixed(2));

                    //debugger;
                    //
                    //alert(tst);
                },

                error: function (jqXhr, textStatus, errorThrown) {
                    alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                },
                complete: function () {
                    // $("#").addClass("hide");
                }

            }
         );
    }

    
    $(document).ready(function () {
         
        if ($("#multiple")[0].checked) {
            $("#multiple").prop('checked', true).change();
            //$("select option").prop("selected", false);
            
        }
        else {
            $("#single").prop('checked', true).change();
            //$("select option").prop("selected", false);
            //$("#UnitPropertyName").attr("disabled", true);
        }
        //$("#property").prop('checked', true).change();
    });

    //$("#single").change()(function () {
    //    disableunit();
    //});
    //$("#multiple").change()(function () {
    //    disableunit();
    //});
    //function disableunit()
    //{
    //    if(($("#single").prop('checked') == true))
    //    {
    //        $("#UnitPropertyName").attr("disabled", true);
    //    }
    //}

    function setpropertyFields() {
        $("#Property_ID_Tawtheeq").val($("#TcaPropertyIDTawtheeq option:selected").text() == "--Select--" ? null : $("#TcaPropertyIDTawtheeq option:selected").text());
        $("#Properties_Name").val($("#TcaPropertyName option:selected").text() == "--Select--" ? null : $("#TcaPropertyName option:selected").text());
        

        var propertyid =parseInt($("#property_id").val());
       //alert(propertyid);
        if($.isNumeric(propertyid))
        {
            //alert(propertyid);
            //alert("getUnit");
            if ($("#single").prop('checked') == true)
            {
               // alert("single");
            }
            $("#TcaUnitPropertyName").empty();
            getUnits(propertyid);
            GetPropertyOnChange();
           
        }  
    }
    function getUnits(propertyId)
    {
        $.ajax(
               {
                   url: "../Tca/GetPropertiesUnitDetails",
                   // dataType: "jsonp",
                   method: "GET",
                   data: { propertyId: propertyId }, //FormData(form.get(0)),
                   contentType: "application/json",

                   success: function (response) {
                        
                       //var propertyidOptions = '<option value="" selected>--Select--</option>';
                       //$("#TcaPropertyId").empty();

                       //var propertyidTawtheeqOptions = '<option value="" selected>--Select--</option>';
                       //$("#TcaPropertyIDTawtheeq").empty();

                       var propertyNameOptions = '<option value="" selected>--Select--</option>';
                       //$("#TcaPropertyName").empty();

                       var unitidOptions = '<option value="" selected>--Select--</option>';
                       $("#TcaUnitIDTawtheeq").empty();

                       var unitnameOptions = '<option value="" selected>--Select--</option>';
                      

                       $.each(response, function (index, data) {
                           //propertyidOptions += '<option value="' + data.property_id + '">' + data.property_id + '</option>';
                           //propertyidTawtheeqOptions += '<option value="' + data.Property_ID_Tawtheeq + '">' + data.Property_ID_Tawtheeq + '</option>';
                           // propertyNameOptions += '<option value="' + data.Property_ID_Tawtheeq + '">' + data.Property_Name + '</option>';

                           unitidOptions += '<option value="' + data.Ref_Unit_Property_ID + '">' + data.Unit_ID_Tawtheeq + '</option>';
                           unitnameOptions += '<option value="' + data.Unit_ID_Tawtheeq + '">' + data.Unit_Property_Name + '</option>';

                       });
                       //$('#TcaPropertyIDTawtheeq').append(propertyidTawtheeqOptions);
                       //$('#TcaPropertyName').append(propertyNameOptions);

                       $('#TcaUnitIDTawtheeq').append(unitidOptions);
                       //$("#UnitPropertyName").empty();
                       $('#TcaUnitPropertyName').append(unitnameOptions);
                   },
                   error: function (jqXhr, textStatus, errorThrown) {
                       alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                   },
                   complete: function () {
                       // $("#").addClass("hide");
                   }

               });
    }
    //function setunitFields()
    //{        
    //    $("#Unit_ID_Tawtheeq").val($("#UnitIDTawtheeq option:selected").text() == "--Select--" ? null : $("#UnitIDTawtheeq option:selected").text());
    //    alert($("#Unit_ID_Tawtheeq").val());
    //    $("#Unit_Property_Name").val($("#UnitPropertyName option:selected").text() == "--Select--" ? null : $("#UnitPropertyName option:selected").text());
    //    alert($("#Unit_Property_Name").val());
    //    //$("#hdnUnit_ID_Tawtheeq").val($("#Unit_ID_Tawtheeq").val());
    //    //$("#hdnUnit_Property_Name").val($("#Unit_Property_Name").val());
    //    ////alert("#hdnUnit_ID_Tawtheeq").val();
    //    //alert("#hdnUnit_Property_Name").val();
    //}
    $("#Agreement_Start_Date").change(function () {
        setContractAmountPerDay();
    });
    $("#Agreement_End_Date").change(function () {
        setContractAmountPerDay();
    });
    $("#Total_Rental_amount").change(function () {
       
        setContractAmountPerDay();
    });
    setContractAmountPerDay();
    function setContractAmountPerDay()
    {
      
        var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds
        var firstDate = new Date($("#Agreement_Start_Date").val());
        var secondDate = new Date($("#Agreement_End_Date").val());
        var Total_Rental_amount = parseFloat($("#Total_Rental_amount").val());
        var diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));        
        var amountperday = 0.0;
        //debugger;
        if (firstDate < secondDate)
        {
            if (diffDays > 0) {
                amountperday = (Total_Rental_amount / (diffDays+1)).toFixed(2);
            }
        }
        else if(firstDate.getDate() == secondDate.getDate())
        {
            amountperday = Total_Rental_amount;
        }

        var PUMonthlyRentPerday = $("#hdnPropUntMonthlyRentPerDay").val();
        var MinRent = diffDays * PUMonthlyRentPerday;
        if (Total_Rental_amount > 0)
        {
            if (MinRent > Total_Rental_amount) {
                var RentDiff = MinRent - Total_Rental_amount;
                if (RentDiff > 50) {
                    debugger;
                    //alert("Rental Amount Less than Minimum Rental Amount\nMonthly Rental:" + $("#hdnPropUnitMonthlyRent").val() + "\nPer Day Rental(Monthly Rental /30):" + PUMonthlyRentPerday + "\nTotal Agreement Days:" + diffDays + "\nMinimum Rental(Per Day Rental*Total Agreement Days):" + MinRent + "\nAgreement Rental Amount:" + Total_Rental_amount + "\nAmount Difference(Minimum Rental-Agreement Rental Amount):" + RentDiff);
                    alert("Rental Amount Less than Minimum Rental Amount\nExpected Rental Amount:" + Math.ceil(MinRent) + "\nAgreement Rental Amount:" + Total_Rental_amount);
                }
            }
        }
       

        
        $("#Perday_Rental").val(amountperday);
    }
    //GetPropertyOnChange
    function GetPropertyOnChange()
    {
        //alert($("#TcaPropertyName").val());
        //alert($("#TcaPropertyName option:selected").val());
        if($("#TcaPropertyName").val()=="")
        {
            return;
        }
        $.ajax(
        {
            url: "../Tca/GetPropertyOnChange",
            // dataType: "jsonp",
            method: "GET",
            data: { propertyId: $("#TcaPropertyName").val() }, //FormData(form.get(0)),
            contentType: "application/json",
            success: function (response) {
                if (response != null) {
                    $.each(response, function (index, data) {
                        $("#Caretaker_id").val(data.Caretaker_ID);
                        $("#Caretaker_Name").val(data.Caretaker_Name);
                        $("#Vacantstartdate").val(data.Vacantstartdate);
                        //break;
                    });
                }

            }
        });

    }
</script>



