
@model LeaMaPortal.Models.UserCreationViewModel

@{
    ViewBag.Title = "Index";
}


<!DOCTYPE html>



<div class="">
    @using (Html.BeginForm(null, null, FormMethod.Post, new { @id = "UserCreation" }))
    {
        @Html.HiddenFor(m => m.id, new { @id = "UserId" })
        <div class="blank">
            <div class="row font-15">
                <div class="col-md-10">
                    <div class="col-md-12 form-input-padding">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "leama-field-name" })
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "leama-field form-control", @required = "required", @pattern = "[a-zA-Z0-9\\s]+", title = "User name should be letters and numbers"} })
                        </div>
                        @*<div class="col-md-4">
                            Name:
                        </div>
                        <div class="col-md-8">
                            <input type="text" class="master-form-input" />
                        </div>*@
                    </div>
                    <div class="col-md-12 form-input-padding">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Userid, htmlAttributes: new { @class = "leama-field-name" })
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Userid, new { htmlAttributes = new { @class = "leama-field form-control", @required = "required", oninput = "checkUserName(this)" } })
                        </div>
                        @*<div class="col-md-4">
                            User ID:
                        </div>
                        <div class="col-md-8">
                            <input type="text" class="master-form-input" />
                        </div>*@
                    </div>
                    <div class="col-md-12 form-input-padding">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Pwd, htmlAttributes: new { @class = "leama-field-name" })
                        </div>
                        <div class="col-md-8">
                            @Html.PasswordFor(model => model.Pwd,  new { @class = "leama-field form-control", @required = "required" } )
                        </div>
                        @*<div class="col-md-4">
                            Password:
                        </div>
                        <div class="col-md-8">
                            <input type="text" class="master-form-input" />
                        </div>*@
                    </div>
                    <div class="col-md-12 form-input-padding">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Cnfpwd, htmlAttributes: new { @class = "leama-field-name" })
                        </div>
                        <div class="col-md-8">
                            @Html.PasswordFor(model => model.Cnfpwd, new { @class = "leama-field form-control", @required = "required", oninput = "check(this)" })
                        </div>
                        @*<div class="col-md-4">
                            Confirm Password:
                        </div>
                        <div class="col-md-8">
                            <input type="text" class="master-form-input" />
                        </div>*@
                    </div>
                    <div class="col-md-12 form-input-padding">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "leama-field-name" })
                        </div>
                        <div class="col-md-8">
                            @Html.DropDownList("Category", null, "--Select--", htmlAttributes: new { @class = "form-control", @placeholder = "-Select-",@required = "required" })
                        </div>
                        @*<div class="col-md-4">
                            Confirm Password:
                        </div>
                        <div class="col-md-8">
                            <input type="text" class="master-form-input" />
                        </div>*@
                    </div>
                    <div class="col-md-12 form-input-padding">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "leama-field-name" })
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "leama-field form-control", @required = "required", @pattern = "^[a-zA-Z0-9_\\.-]+@([a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$", title = "Enter valid email id" } })
                        </div>
                        @*<div class="col-md-4">
                            Confirm Password:
                        </div>
                        <div class="col-md-8">
                            <input type="text" class="master-form-input" />
                        </div>*@
                    </div>
                    <div class="col-md-12 form-input-padding">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Phoneno, htmlAttributes: new { @class = "leama-field-name" })
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Phoneno, new { htmlAttributes = new { @class = "leama-field form-control", @required = "required", @pattern = "^\\+?\\d{0,13}", title = "Enter 15 digit valid phone number" } })
                        </div>
                        @*<div class="col-md-4">
                            Confirm Password:
                        </div>
                        <div class="col-md-8">
                            <input type="text" class="master-form-input" />
                        </div>*@
                    </div>
                    <div class="col-md-12 form-input-padding">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Active, htmlAttributes: new { @class = "leama-field-name" })
                        </div>
                        <div class="col-md-8">
                            @Html.HiddenFor(m => m.Active, new { @id = "hdnActive" })
                            @Html.CheckBoxFor(model => model.Active.HasValue, new { @id = "chkActive", @class = "input-checkbox" })
                        </div>
                    </div>
                    <div class="col-md-12 form-input-padding">
                        <div class="col-md-4">
                            &nbsp;
                        </div>
                        <div class="">
                            <div class="col-md-2">
                                <div class="col-md-1">
                                    @Html.HiddenFor(m => m.AddConfig, new { @id = "hdnAddConfig" })
                                    @Html.CheckBoxFor(m => m.AddConfig.HasValue, new { @id = "chkAddConfig", @class = "input-checkbox" })
                                </div>
                                <div class="col-md-8 m-t-3">
                                    <span> @Html.LabelFor(model => model.AddConfig, htmlAttributes: new { @class = "leama-field-name" }) </span>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="col-md-1">
                                    @Html.HiddenFor(m => m.EditConfig, new { @id = "hdnEditConfig" })
                                    @Html.CheckBoxFor(m => m.EditConfig.HasValue, new { @id = "chkEditConfig", @class = "input-checkbox" })
                                    @*<input type="checkbox" class="input-checkbox">*@
                                </div>
                                <div class="col-md-8 m-t-3">
                                    <span> @Html.LabelFor(model => model.EditConfig, htmlAttributes: new { @class = "leama-field-name" }) </span>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="col-md-1">
                                    @Html.HiddenFor(m => m.DeleteConfig, new { @id = "hdnDeleteConfig" })
                                    @Html.CheckBoxFor(m => m.DeleteConfig.HasValue, new { @id = "chkDeleteConfig", @class = "input-checkbox" })
                                    @*<input type="checkbox" class="input-checkbox">*@
                                </div>
                                <div class="col-md-8 m-t-3">
                                    <span> @Html.LabelFor(model => model.DeleteConfig, htmlAttributes: new { @class = "leama-field-name" }) </span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                </div>
                <div class="col-md-12">
                    @*<div class="col-md-6">*@
                        <h5 class="p-b-25 text-uppercase"> Menu Names </h5>
                    @*</div>*@
                    @*<div class="col-md-6">
                        <h5 class="p-b-25"> REPORT DATA </h5>
                    </div>*@
                </div>
                @Html.HiddenFor(m => m.MenuConfig, new { @id = "MenuConfig" })
                @if (ViewBag.MenuRights != null)
                {
                    foreach (var menuItem in ViewBag.MenuRights)
                    {
                        //if (menuItem.Id % 2 != 0)
                        //{

                        //}
                        //else
                        //{

                        //}
                        @*<div class="col-md-7 p-b-10">*@
                        <div class="col-md-4 p-b-10">
                            <div class="col-md-12 report-form-row">
                                <div class="col-md-1">@menuItem.Id</div>
                                <div class="col-md-9 text-center">@menuItem.MenuName</div>
                                <div class="col-md-1 report-checkbox-align"> <input type="checkbox" checked="@menuItem.IsChecked" name="@menuItem.Id" class="input-checkbox menurights" /> </div>
                            </div>
                        </div>
                        @*</div>*@
                    }
                }
                <div class="col-md-12 form-input-padding btn-group-justified">
                    <div class="col-md-3">

                    </div>
                    <div class="col-md-3">
                        <button class="btn master-form-btn" id="btnSubmit" type="submit">Submit</button>
                    </div>
                    <div class="col-md-3">
                        <button class="btn master-form-btn" id="btnCancel" type="reset" onclick="formReset()">Cancel</button>
                    </div>
                    <div class="col-md-3">

                    </div>

                </div>

                @*<div class="col-md-12 form-input-padding p-b-10">
                    <div class="col-md-4">
                        &nbsp;
                    </div>
                    <div class="col-md-4">
                        <button class="btn master-form-btn">Submit</button>
                    </div>
                </div>*@
            </div>
        </div>
    }
</div>



<script>

    function checkUserName(input) {
        debugger;
        //$("#master-loader").removeClass("hide");
        $.ajax(
        {
            url: "../UserCreation/checkUserName?id=" + $("#UserId").val() + "&userid=" + $("#Userid").val(),
            type: "Get",
            data: {},
            contentType: "application/json",
            processData: false,
            success: function (response) {
                if (response.Errors != null) {
                    input.setCustomValidity(response.Errors);
                }
                else {
                    input.setCustomValidity('');
                }
            },
            error: function (jqXhr, textStatus, errorThrown) {
                // alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
               
            },
            complete: function () {
                //$("#img-loader").addClass("hide");
               // $("#master-loader").addClass("hide");
            }
        });
    }

    function formReset() {
        getUserCreationAddOrUpdate();
    }
    //Add or update
    $("form#UserCreation").off("submit").on("submit", function (e) {
        e.preventDefault();
        // $("#icon-success").addClass("hide");
        //$("#VerifyIdDetailsLoader").removeClass("hide");
        try {
            var form = $("form#UserCreation");
            var menuCheckBoxes = $(".menurights");
            var menuIds = "";
            debugger;
            $('input.menurights:checkbox:checked').each(function () {
                menuIds = menuIds == "" ? $(this.name).selector : menuIds + "," + $(this.name).selector;
            });
            //for (var i = 0; i < menuCheckBoxes.length; i++) {
            //    if (menuCheckBoxes[i].checked) {
            //        menuIds = menuIds == "" ? menuCheckBoxes[i].name : menuIds + "," + menuCheckBoxes[i].name;
            //        //alert(menuCheckBoxes[i].name);
            //    }
            //}
            $("#MenuConfig").val(menuIds);

            if ($("#chkAddConfig")[0].checked) {
                $("#hdnAddConfig").val(1);
            }
            if ($("#chkEditConfig")[0].checked) {
                $("#hdnEditConfig").val(1);
            }
            if ($("#chkDeleteConfig")[0].checked) {
                $("#hdnDeleteConfig").val(1);
            }
            if ($("#chkActive")[0].checked) {
                $("#hdnActive").val(1);
            }
            $.ajax(
                {
                    url: "../UserCreation/AddOrUpdate",
                    // dataType: "jsonp",
                    method: "POST",
                    data: JSON.stringify($(form).serializeObject()), //FormData(form.get(0)),
                    contentType: "application/json",
                    processData: false,
                    success: function (response) {
                        if (response.Errors != null) {
                            $("#masterResultModal").contents().find(".modal-header").removeClass("result-modal-success");
                            $("#masterResultModal").contents().find(".modal-header").addClass("result-modal-error");
                            $(".result-title").text("Failure");
                            $(".result-modal-body span").text(response.Errors);
                        }
                        else {
                            GetUserCreation();
                            $("#masterResultModal").contents().find(".modal-header").removeClass("result-modal-error");
                            $("#masterResultModal").contents().find(".modal-header").addClass("result-modal-success");
                            $(".result-title").text("Success");
                            $(".result-modal-body span").text(response.Message);
                        }
                        
                    },
                    error: function (jqXhr, textStatus, errorThrown) {
                        //alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                        $("#masterResultModal").contents().find(".modal-header").removeClass("result-modal-success");
                        $("#masterResultModal").contents().find(".modal-header").addClass("result-modal-error");
                        $(".result-title").text("Failure");
                        $(".result-modal-body span").text(masterResultError);
                    },
                    complete: function () {
                        // $("#").addClass("hide");
                        $('#masterResultModal').modal('show');
                    }

                });

        }
        catch (ex) {
            alert(ex);
        }

    });
    $.fn.serializeObject = function () {
        var o = {};
        var a = this.serializeArray();
        $.each(a, function () {
            if (o[this.name] !== undefined) {
                if (!o[this.name].push) {
                    o[this.name] = [o[this.name]];
                }
                o[this.name].push(this.value || '');
            } else {
                o[this.name] = this.value || '';
            }
        });
        return o;
    };
    function check(input) {
        if (input.value != document.getElementById('Pwd').value) {
            input.setCustomValidity('Password Must be Matching.');
        } else {
            // input is valid -- reset the error message
            input.setCustomValidity('');
        }
    }
    $(document).ready(function () {

        var id = $("#UserId").val();
        if (id != 0) {
            document.getElementById("btnSubmit").innerHTML = 'Update';
        }

    });
    //$("#Region").on('change', function (e) {
    //    var region = $("#Region").val();
    //    if (region != "" && region != null) {
    //        $.ajax(
    //            {
    //                url: "../Region/GetCountry",
    //                // dataType: "jsonp",
    //                method: "GET",
    //                data: { region: $("#Region").val() }, //FormData(form.get(0)),
    //                contentType: "application/json",

    //                success: function (response) {
    //                    debugger;
    //                    if (response != null) {
    //                        $("#Country").val(response);
    //                    }
    //                },
    //                error: function (jqXhr, textStatus, errorThrown) {
    //                    alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
    //                },
    //                complete: function () {
    //                    // $("#").addClass("hide");
    //                }

    //            });
    //    }
    //   // $("#Title").val($("#TitleDisplay").val());
    //});

</script>

