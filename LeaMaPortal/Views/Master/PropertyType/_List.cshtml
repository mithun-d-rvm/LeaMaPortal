
@*@model LeaMaPortal.Models.PropertyTypeViewModel*@
@using MvcPaging
@model IPagedList<LeaMaPortal.Models.PropertyTypeViewModel>
@{
    Layout = null;
}
<link href="~/content/bootstrap.css" rel="stylesheet" />
<link href="~/theme/css/leemastyle.css" rel="stylesheet" />
<link href="~/theme/css/leametablestyle.css" rel="stylesheet" />
<!DOCTYPE html>

<div class="col-md-12 leama-fieldset leama-header-top" style="background-color:white;">
    <div class="row">
        <div class="col-md-12 leama-fieldset ">
            <div class="col-md-2 pull-left">
                @Html.Label("Search", htmlAttributes: new { @class = "leama-field-name" })
            </div>
            <div class="col-md-4">
                <input type="text" class="leama-field form-control" name="Search" id="Search" value="@ViewData["Search"]" />
            </div>
            <div class="col-md-4">
                <button type="button" id="btn-search" class="btn btn-info leama-search-btn col-md-4">Go</button>
            </div>
        </div>

        <div class="col-md-12 leama-fieldset ">
            &nbsp;
        </div>

        <div class="divTable leama-fieldset col-md-12">


            <div class="divTableBody divFontBodyTable">
                <div class="divTableHeading">
                    <div class="divTableCell ">Property Type Name</div>
                    <div class="divTableCell">Property Category</div>
                    <div class="divTableCell">Usage Name</div>
                    <div class="divTableCell">Action</div>

                </div>
                @foreach (var item in Model)
                {
                    <div class="divTableRow">
                        <div class="divTableCell">@item.PropertyType</div>
                        <div class="divTableCell">@item.PropertyCategory</div>
                        <div class="divTableCell">@item.Usage_name</div>
                        <div class="divTableCell">
                            @Html.ActionLink(" ", "Edit", null, new { @class = "glyphicon glyphicon-edit propertytype-edit", title = "Edit", @data_propertytype = @item.PropertyType, @data_propertycategory= @item.PropertyCategory, @data_usagename= @item.Usage_name})  |
                            @Html.ActionLink(" ", "Delete", null, new { @class = "glyphicon glyphicon-trash propertytype-delete", @style = "color:red", @title = "Delete", @data_id = @item.PropertyType + "-" + @item.PropertyCategory + "-" + @item.Usage_name })
                            @*| @Html.ActionLink(" ", "Details", null, new { @class = "glyphicon glyphicon-th-list", title = "Details" })*@
                        </div>
                    </div>
                }

            </div>
            <div class="col-md-12">
                <br />
                @Html.HiddenFor(m => m.PageNumber)
                <div class="col-md-2">
                    @Html.DropDownList("defaultPageSize", null, htmlAttributes: new { @class = "form-control" })
                </div>
                <div class="col-lg-10 text-right">
                    @for (int i = 1; i <= Model.PageCount; i++)
                    {
                        if (i == Model.PageNumber)
                        {
                            <input type="button" data-id="@i" value="@i" class="pagination-btn" />
                        }
                        else
                        {
                            <input type="button" data-id="@i" value="@i" class="Page" />
                        }
                    }
                </div>
            </div>
        </div>

        <script type="text/javascript">
                $(".Page").click(function(e)
                {
                    var page = parseInt($(this).data("id"));
                    var defaultPageSize = $("#defaultPageSize").val();
                    var search = $("#Search").val();
                    //alert(page);
                    getPropertyTypeList(search,page,defaultPageSize)
                });
                $("#defaultPageSize").change(function () {
                    var search = $("#Search").val();
                    var defaultPageSize = $("#defaultPageSize").val();
                    getPropertyTypeList(search, 1, defaultPageSize)
                });
                $("#btn-search").click(function (e) {
                    var search = $("#Search").val();
                    var defaultPageSize = $("#defaultPageSize").val();
                    getPropertyTypeList(search, 1, defaultPageSize)
                });

                function getPropertyTypeList(search, page, defaultPageSize)
                {
                    $.ajax(
                       {
                           url: "../PropertyType/Index",
                           type: "Get",
                           data: { Search: search, page: page, defaultPageSize: defaultPageSize },
                           success: function (html) {
                               $("#ContainerList").html(html);
                           },
                           error: function (jqXhr, textStatus, errorThrown) {
                               alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                           },
                           complete: function () {
                               //   $("#VerifyIdDetailsLoader").addClass("hide");
                           }
                       });
                }
    function beginPaging(args) {
        // Animate
        $('#grid-list').fadeOut('normal');
    }

    function successPaging() {
        // Animate
        $('#grid-list').fadeIn('normal');
        $('a').tooltip();
    }

    function failurePaging() {
        alert("Could not retrieve list.");
    }

        </script>
    </div>


</div>

<script>
    //Edit get

    $(".propertytype-edit").click(function (e) {
        e.preventDefault();
        debugger;
        var propertytype = $(this).data("propertytype");
        var propertycategory = $(this).data("propertycategory");
        var usagename= $(this).data("usagename");
       // var id = $(this).data("id");
        //var param = id.split('-');
        $.ajax(
            {
                url: "../PropertyType/Edit",
                type: "Get",
                data: { PropertyType: propertytype, PropertyCategory: propertycategory, Usage_name: usagename },
                success: function (result) {
                    if (result.Errors == undefined || result.Errors == "") {
                        debugger;
                        $("#PropertyTypeId").val(result.Id);
                        $("#PropertyType").val(result.PropertyType);
                        $("#UsageName").val(result.Usage_name);
                        $("#PropertyCategory").val(result.PropertyCategory);
                    }
                    else {
                        alert(data.Errors);
                    }
                },
                error: function (jqXhr, textStatus, errorThrown) {
                    alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                },
                complete: function () {
                }
            });
    });

    // delete
    $(".propertytype-delete").click(function (e) {
        e.preventDefault();
        var propertytype = $(this).data("propertytype");
        var propertycategory = $(this).data("propertycategory");
        var usagename = $(this).data("usagename");
        var r = confirm("Are you sure want to delete?");
        if (r == false) {
            return;
        }
        else {
            $.ajax(
                {
                    url: "../PropertyType/Delete",
                    type: "Get",
                    data: { PropertyType: propertytype, PropertyCategory: propertycategory, Usage_name: usagename },
                    success: function (response) {
                        GetPropertyType();
                    },
                    error: function (jqXhr, textStatus, errorThrown) {
                        alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                    },
                    complete: function () {
                    }
                });
        }
    });

</script>
