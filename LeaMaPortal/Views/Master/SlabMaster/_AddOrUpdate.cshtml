


@model LeaMaPortal.Models.SlabViewModel

@{
    Layout = null;
}

<!DOCTYPE html>

@using (Html.BeginForm(null, null, FormMethod.Post, new { @id = "Slab" }))
{
    @Html.HiddenFor(m => m.Id, new { @id = "SlabMasterId" })
    <div class="col-md-12 leama-fieldset leama-header-top">
        <div class="row">
            <div class="col-md-12 leama-fieldset ">
                <div class="col-md-2 pull-left">
                    @Html.LabelFor(model => model.SlabId, htmlAttributes: new { @class = "leama-field-name" })
                </div>
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.SlabId, new { htmlAttributes = new { @class = "leama-field form-control", @required = "required", @id = "SlabId", @readonly = "readonly" } })
                </div>
            </div>
            <div class="col-md-12 leama-fieldset ">
                <div class="col-md-2 pull-left">
                    @Html.LabelFor(model => model.Utility_id, htmlAttributes: new { @class = "leama-field-name" })
                </div>
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.Utility_id, new { htmlAttributes = new { @class = "leama-field form-control", @required = "required", @id = "Utility_id", @readonly = "readonly" } })
                </div>
            </div>
            <div class="col-md-12 leama-fieldset ">
                <div class="col-md-2 pull-left">
                    @Html.LabelFor(model => model.Utility_Name, htmlAttributes: new { @class = "leama-field-name" })
                </div>
                <div class="col-sm-4 ">
                    @Html.DropDownList("Utility_Name", null, "--Select--", htmlAttributes: new { @class = "master-form-input", @required = "required", @id = "Utility_Name" })
                </div>
            </div>
            <div class="col-md-12 leama-fieldset ">
                <div class="col-md-2 pull-left">
                    @Html.LabelFor(model => model.Unit_From, htmlAttributes: new { @class = "leama-field-name" })
                </div>
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.Unit_From, new { htmlAttributes = new { @class = "leama-field form-control", @required = "required", @id = "Unit_From", @onblur = "setMinForUnit()",@min=0, @pattern = "[0-9]+", title = "Numeric only" } })
                </div>
            </div>
            <div class="col-md-12 leama-fieldset ">
                <div class="col-md-2 pull-left">
                    @Html.LabelFor(model => model.Unit_to, htmlAttributes: new { @class = "leama-field-name" })
                </div>
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.Unit_to, new { htmlAttributes = new { @class = "leama-field form-control", @required = "required", @id = "Unit_to", @onblur = "setMaxForUnit()", @min = 0, @pattern = "[0-9]+", title = "Numeric only" } })
                </div>
            </div>
            <div class="col-md-12 leama-fieldset ">
                <div class="col-md-2 pull-left">
                    @Html.LabelFor(model => model.rate, htmlAttributes: new { @class = "leama-field-name" })
                </div>
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.rate, new { htmlAttributes = new { @class = "leama-field form-control", @required = "required", @id = "rate", @onkeypress = "allow_only_Float(event,'rate');", title = "Numeric only" } })
                </div>
            </div>
            <div class="col-md-12 leama-fieldset ">
                <div class="col-md-2 pull-left">
                    @Html.LabelFor(model => model.Colour, htmlAttributes: new { @class = "leama-field-name" })
                </div>
                <div class="col-sm-4 ">
                    @Html.DropDownList("Colour", null, "--Select--", htmlAttributes: new { @class = "master-form-input", @required = "required", @id = "Colour" })
                </div>
            </div>
            <div class="col-md-12 leama-fieldset ">
                <div class="col-md-2 pull-left">
                    @Html.LabelFor(model => model.Residence_type, htmlAttributes: new { @class = "leama-field-name" })
                </div>
                <div class="col-sm-4 ">
                    @Html.DropDownList("Residence_type", null, "--Select--", htmlAttributes: new { @class = "master-form-input", @required = "required", @id = "Residence_type" })
                </div>
            </div>
            <div class="col-md-12 leama-fieldset ">
                <div class="col-md-12 pull-left">
                    <button type="submit" id="btnCancel" class="col-md-offset-2 leama-btn">Submit</button>&nbsp;&nbsp;
                    <button class="btn master-form-btn" id="btnCancel" type="button" onclick="formReset()">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}
<script>
    function formReset() {
        GetSlabAddOrUpdate();
    }
    function setMaxForUnit() {
         
        var to = $("#Unit_to").val();
        if(to != "")
        {
            $("#Unit_From").prop('max', parseInt(to));
            //$("#Unit_From").attr('max', parseInt(to));
        }
    }
    function setMinForUnit() {
         
        var from = $("#Unit_From").val();
        if (from != "") {
            $("#Unit_to").prop('min', parseInt(from));
            //$("#Unit_to").attr('min', parseInt(from));
        }
    }
    function getUtilityId()
    {
        var UtilityName = $("#Utility_Name").val();
        $.ajax(
                {
                    url: "../Slab/GetUtilityId",
                    method: "POST",
                    async : false,
                    data: { UtilityName: UtilityName },
                    success: function (response) {
                        $("#Utility_id").val(response);
                    },
                    error: function (jqXhr, textStatus, errorThrown) {
                        alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                    },
                    complete: function () {
                    }
                });
    }
    $("#Utility_Name").change(function () { getUtilityId() });
    getUtilityId();
    //Add or update
    $("form#Slab").off("submit").on("submit", function (e) {
        e.preventDefault();
        //var from = $("#Unit_From").val();
        //var to = $("#Unit_to").val();
        //if ((to-from) < 0)
        //{
        //     
        //    alert("Enter valid unit from and unit to values!");

        //    $("#Unit_From").get(0).setCustomValidity("Enter valid unit from and unit to values!");
        //    //$("#Unit_to").get(0).setCustomValidity("Enter valid unit from and unit to values!");
        //}
        try {
            var form = $("form#Slab");
            $.ajax(
                {
                    url: "../Slab/AddOrUpdate",
                    method: "POST",
                    data: JSON.stringify($(form).serializeObject()),
                    contentType: "application/json",
                    processData: false,
                    success: function (response) {
                        GetSlab();
                        if (response.Errors == null) {
                            $("#masterResultModal").contents().find(".modal-header").removeClass("result-modal-error");
                            $("#masterResultModal").contents().find(".modal-header").addClass("result-modal-success");
                            $(".result-title").text("Success");
                            $(".result-modal-body span").text(response.Message);
                        }
                        else
                        {
                            $("#masterResultModal").contents().find(".modal-header").removeClass("result-modal-success");
                            $("#masterResultModal").contents().find(".modal-header").addClass("result-modal-error");
                            $(".result-title").text("Failure");
                            $(".result-modal-body span").text(response.Errors);
                        }
                    },
                    error: function (jqXhr, textStatus, errorThrown) {
                        //alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                        $("#masterResultModal").contents().find(".modal-header").removeClass("result-modal-success");
                        $("#masterResultModal").contents().find(".modal-header").addClass("result-modal-error");
                        $(".result-title").text("Failure");
                        $(".result-modal-body span").text(masterResultError);
                    },
                    complete: function () {
                        // $("#").addClass("hide");
                        $('#masterResultModal').modal('show');
                    }
                });
        }
        catch (ex) {
            alert(ex);
        }

    });
    $.fn.serializeObject = function () {
        var o = {};
        var a = this.serializeArray();
        $.each(a, function () {
            if (o[this.name] !== undefined) {
                if (!o[this.name].push) {
                    o[this.name] = [o[this.name]];
                }
                o[this.name].push(this.value || '');
            } else {
                o[this.name] = this.value || '';
            }
        });
        return o;
    };
    $(document).ready(function () {
        var id = $("#SlabMasterId").val();
        if (id != 0) {
            document.getElementById("btnSubmit").innerHTML = 'Update';
        }
    });
</script>
